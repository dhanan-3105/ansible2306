demo.oci.yaml

plugin: oracle.oci.oci

regions:
 - eu-frankfurt-1

compartments:
 - compartment_ocid: "your-compartment-id"
   fetch_hosts_from_subcompartments: false

usecase1.yaml
==============

Ansible YAML

- name: read file on host
  hosts: all
  remote_user: opc
  vars:
    x: " "
  tasks:
   - name: Read the file
     command: cat /home/opc/.ssh/authorized_keys
     register: x

   - name: print file
     debug:
      msg: "the content of file is {{ x }}"

   - name: write a file
     file: path=/home/opc/configfiles state=touch

    - name: closure
     debug:
        msg : "file created in {{inventory_hostname}}"

usecase2.yaml
---
 - name: install binaries on host
   hosts: all
   become: true
   tasks:
   - name: install packages
     yum: name={{item}} state=latest
     loop:
      - openssl-devel
      - glibc-devel
      - htop
   - name : print message
     debug:
       msg: file created

  
usecase3.yaml
=============

- hosts: all
  become: true
  tasks:
  - name : install http
    yum: name=httpd state=latest
  - name: start and enable httpd
    service: name=httpd state=restarted enabled=yes
  handlers:
  - name: restart apache
    service: name=httpd state=restarted


usecase4.yaml
============

- hosts: localhost
  connection: local
  become: yes
  tasks:
    - name: install podman
      command: yum install -y podman
    - name: deploy nginx podman container
      command: podman run -d  --name testapache --privileged -p 8085:80 httpd
    - name: list all containers
      command: podman  ps -a
    - name: verify service working
      command: curl {{ansible_hostname}}:8085
    - name: remove container
      command : podman rm -f testnginx


usecase5.yaml

- name: Get namespace name
  hosts: localhost
  collections:
    - oracle.oci
  tasks:
    - name: Get namespace name
      oci_object_storage_namespace_facts:
      register: output
    - name: Print namespace name
      debug:
        msg: "{{ output }}"


usecase6.yaml


- name : List summary
  collections:
    - oracle.oci
  connection: local
  hosts: localhost
  tasks:
   - name: List availability domains
     oci_identity_availability_domain_facts:
     # required
       compartment_id: ""
     register: result

   - name : print ADs
     debug:
       msg: {{ result }}


usecase7.yaml

---

- name : List summary
  collections:
    - oracle.oci
  connection: local
  hosts: localhost
  tasks:
   - name: List availability domains
     oci_identity_availability_domain_facts:
     # required
       compartment_id: "tenancy-ocid"
     register: result

   - name: List shapes
     oci_compute_shape_facts:
      # required
      compartment_id: "compartment-oicd"
      # optional
     register: result1

   - name : print all the AD's
     debug:
      msg: "{{ result }}"


   - name : print all the shapes
     debug:
      msg: "{{ result1 }}"


---
- name : List summary of existing buckets in OCI object storage
  collections:
    - oracle.oci
  connection: local
  hosts: localhost
  vars:
    output_namespace: "sample_namespace"
  tasks:
    - name: Get namespace name
      oci_object_storage_namespace_facts:
      register: output_namespace

    - name: List bucket facts
      oci_object_storage_bucket_facts:
       namespace_name: '{{ output_namespace.namespace }}'
       compartment_id: 'put your compartment ocid'
       fields: [ "approximateCount","approximateSize","autoTiering"]

      register: result
    - name: Dump result
      debug:
        msg: '{{result}}'

usecase10.yaml
==============

- name: List objects from all the buckets
  hosts: localhost
  collections:
    - oracle.oci
  vars:

    sample_bucket_name: "sample_bucket"
    sample_object_name: "sample_object"


    compartment_id: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"

  tasks:
    - name: Get all the buckets in the namespace

      oci_object_storage_namespace_facts:
      register: namespace_name

    - name: list bucket facts
      oci_object_storage_bucket_facts:
        namespace_name: "{{ namespace_name.namespace }}"
        compartment_id: "{{ compartment_id }}"
      register: ocibuckets

    - name: Get all objects from all the buckets
      oci_object_storage_object_facts:
        namespace_name: "{{ namespace_name.namespace }}"
        bucket_name: "{{ item.name }}"
      with_items: "{{ ocibuckets.buckets }}"
      register: output
    - name: Print objects list
      debug:
        msg: 'Bucket: {{item.item.name}}, Objects: {{item.objects}}'
      loop: "{{output.results}}"
      loop_control:
        label: "{{item.item.name}}"
